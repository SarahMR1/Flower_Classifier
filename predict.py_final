from PIL import Image
from math import floor
import torch
from torch import optim, nn
from torchvision import datasets, transforms, models
from torch.autograd import Variable
import numpy as np
import matplotlib.pyplot as plt
import json
import operator
import argparse

# Load arguments
parser = argparse.ArgumentParser()
parser.add_argument('image_path', help = 'Provide filepath of image to predict.', type = str)
parser.add_argument('checkpoint_path', help = 'Provide filepath of checkpoint to use.', type = str)

parser.add_argument ('--top_k', help = 'Provide number of top results to display', type = int, default = 5)
parser.add_argument('--category_names', help = 'Provide filepath to file containing category names.', type = str, default = 'cat_to_name.json')
parser.add_argument('--gpu',type=bool,help='Set to True to use gpu, default is False (cpu)', default=False,)

args = parser.parse_args()


image_path = args.image_path
checkpoint_path = args.checkpoint_path
topk = args.top_k
catfile = args.category_names

#print(checkpoint_path)
if args.gpu:

    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

else:

    device = torch.device('cpu')


#Load checkpoint

def load_checkpoint(filepath):
   
    checkpoint = torch.load(filepath)
    hidden_units = checkpoint['hidden_layers']
    modelarch=checkpoint['arch']
    if modelarch=='resnet34':
         model = models.resnet34(pretrained=True)
    else:
        model = models.resnet18(pretrained=True)
            
    classifier = nn.Sequential( nn.Linear(512, hidden_units),
                               nn.ReLU(),
                               nn.Dropout(p=0.2),
                               nn.Linear(hidden_units, 102),
                               nn.ReLU(),
                               nn.LogSoftmax(dim=1))
                          
    model.fc=classifier                                
    
    model.load_state_dict(checkpoint['state_dict'])
    model.idx_to_class = checkpoint['idx_to_class']
    
    return model

model=load_checkpoint(checkpoint_path)

#process image
def process_image(image):
    ''' *** Use image path for image variable
    Scales, crops, and normalizes a PIL image for a PyTorch model,
        returns an Numpy array
    '''
    #Open image as PIL image
    image = Image.open(image)  
    # TODO: Process a PIL image for use in a PyTorch model
    width, height = image.size
    size = 256, 256
    if width > height: #keep ratio
        ratio = float(width) / float(height)
        newheight = ratio * size[0]
        image = image.resize((size[0], int(floor(newheight))), Image.ANTIALIAS)
    else:
        ratio = float(height) / float(width)
        newwidth = ratio * size[0]
        image = image.resize((int(floor(newwidth)), size[0]), Image.ANTIALIAS)
    
    image = image.crop((        #crop image
        size[0] //2 - (224/2),
        size[1] //2 - (224/2),
        size[0] //2 + (224/2),
        size[1] //2 + (224/2))
    )
    #create np array with proper means and std deviation
    image_array = np.array(image)/255
    image_array[:,:,0] = (image_array[:,:,0] - 0.485)/(0.229)
    image_array[:,:,1] = (image_array[:,:,1] - 0.456)/(0.224)
    image_array[:,:,2] = (image_array[:,:,2] - 0.406)/(0.225)
    image_array = np.transpose(image_array, (2,0,1)) #put color channel in 1st position
    
    return torch.FloatTensor([image_array])

#make prediction of flower name
def predict(image_path, model, topk):
    
    ''' Predict the class (or classes) of an image using a trained deep learning model.
    '''
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu") #use GPU if available, if selected
    
    image = process_image(image_path) #process image
    
    image = image.to(device) #send image to device (gpu if selected, otherwise cpu)
    model = model.to(device) #send image to device (cpu if selected, otherwise cpu)

    model.eval()
    output = model.forward(Variable(image)) #get output
    
    ps = torch.exp(output).data #create probability of outsput
    
    largest = ps.topk(topk) #take topk pobabilities
    
    prob = largest[0].cpu().numpy()[0] #make probabilites a numpy array
    idx = largest[1].cpu().numpy()[0] #make classes a numpy array
    
    classes = [model.idx_to_class[x] for x in idx] #assign index from json file to class
    
    return prob, classes

probs, classes = predict(image_path, model, topk) #do the prediction



#Print out topk labels with probabilities
with open(catfile, 'r') as f: #open file to get mapping of names to idx
    cat_to_name = json.load(f)

y=([cat_to_name[x] for x in classes]) #map index to name

x=probs

list_zip = sorted(zip(y, x)) #zip names and probabilites together

label_dic={} 

for i,j in list_zip: #attach names to probabilities in a dic
    label_dic[i]=j

sorted_label_dic = sorted(label_dic.items(), key=operator.itemgetter(1), reverse=True) #created a sorted list of items in the dic
print("Top classification results:") 
for k, v in sorted_label_dic: #print out names and probabilies in descending order of probability
    print("{}: {}".format(k,v))



